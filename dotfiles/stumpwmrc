;; -*-lisp-*-
;;
;; cdr255's .stumpwmrc file. Pulled from the =dotfiles= repo.

(in-package :stumpwm)
(require :battery-portable)
(require :screenshot)

;; These are lifted right from the example.
;;;
;;; Set our prefix key.
(set-prefix-key (kbd "C-t"))

;;; prompt the user for an interactive command. The first arg is an
;;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))

;;; Web jump (works for DuckDuckGo and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
    (nsubstitute #\+ #\Space search)
    (run-shell-command (concatenate 'string ,prefix search))))

;; Custom Functions

;;; PusleAudio Volume Control Functions
;;; Pulled from https://gist.github.com/TeMPOraL/4cece5a894c62a4f02ff14028d9f20e1
(defun current-volume-settings ()
  "Return current volume settings as multiple values (`MUTEDP', `VOLUME-LEFT-%', `VOLUME-RIGHT-%')."
  (let* ((raw-output (run-shell-command "pactl list sinks" t))
         (raw-mute (nth-value 1 (cl-ppcre:scan-to-strings "Mute: ([a-z]+)" raw-output)))
         (raw-volume (nth-value 1 (cl-ppcre:scan-to-strings "Volume: .+/\\s+(\\d+).+/.+/\\s+(\\d+).+/" raw-output)))
         (mutedp (string= (svref raw-mute 0) "yes"))
         (vol%-l (parse-integer (svref raw-volume 0)))
         (vol%-r (parse-integer (svref raw-volume 1))))
    (values mutedp vol%-l vol%-r)))
(defun display-current-volume ()
  "Graphically display the current volume state."
  (multiple-value-bind (mutedp left% right%)
      (current-volume-settings)
    (let ((*record-last-msg-override* t))
      (message "Volume: ~:[~;^1MUTE^n~] [~D%/~D%]" mutedp left% right%))))

(defcommand vol+ (dvol force) (:string :y-or-n)
  "Change the volume by `DV' percent, possibly going over 100% if `FORCE' is T."
  (run-shell-command
   "pactl set-sink-volume alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink +5%")
  (display-current-volume)
(echo (format nil "pactl set-sink-volume alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink ~a" dvol)))

(defcommand vol-mute () ()
  "Toggle mute of volume."
  (run-shell-command "pactl set-sink-mute alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink toggle" t)
  (display-current-volume))

(defcommand display-brightness-up () ()
  "Increase Brightness of Default Display."
  (run-shell-command "brightnessctl s 5%+" t))

(defcommand display-brightness-down () ()
  "Decrease Brightness of Default Display."
  (run-shell-command "brightnessctl s 5%-" t))
(defcommand show-volume () ()
  "Show the Current Volume Setting."
  (run-shell-command
   "pactl list sinks | grep Volume | tail -n 2 | head -n 1 | sed 's/^.*: //g'" t))
(defcommand vol+5 () ()
  "Increase Volume by 5%"
  (run-shell-command
   "pactl set-sink-volume alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink +5%")
  (show-volume))
(defcommand vol-5 () ()
  "Decrease Volume by 5%"
  (run-shell-command
   "pactl set-sink-volume alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink -5%")
  (show-volume))
(defcommand vol+1 () ()
  "Increase Volume by 1%"
  (run-shell-command
   "pactl set-sink-volume alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink +1%")
  (show-volume))
(defcommand vol-1 () ()
  "Decrease Volume by 1%"
  (run-shell-command
   "pactl set-sink-volume alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink -1%")
  (show-volume))

;; Web Jumps
(make-web-jump "duckduckgo" "firefox https://duckduckgo.com/?q=")
(make-web-jump "imdb" "firefox http://www.imdb.com/find?q=")

;;; Within bounds
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioLowerVolume") "vol-5")
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioRaiseVolume") "vol+5")
(define-key stumpwm:*top-map* (stumpwm:kbd "C-XF86AudioLowerVolume") "vol-1")
(define-key stumpwm:*top-map* (stumpwm:kbd "C-XF86AudioRaiseVolume") "vol+1")
(define-key stumpwm:*top-map* (stumpwm:kbd "S-XF86AudioLowerVolume") "vol+ -25% n")
(define-key stumpwm:*top-map* (stumpwm:kbd "S-XF86AudioRaiseVolume") "vol+ 25% n")

;;; Outside bounds
(define-key stumpwm:*top-map* (stumpwm:kbd "M-XF86AudioLowerVolume") "vol+ -5% y")
(define-key stumpwm:*top-map* (stumpwm:kbd "M-XF86AudioRaiseVolume") "vol+ 5% y")
(define-key stumpwm:*top-map* (stumpwm:kbd "M-C-XF86AudioLowerVolume") "vol+ -1% y")
(define-key stumpwm:*top-map* (stumpwm:kbd "M-C-XF86AudioRaiseVolume") "vol+ 1% y")
(define-key stumpwm:*top-map* (stumpwm:kbd "M-S-XF86AudioLowerVolume") "vol+ -25% y")
(define-key stumpwm:*top-map* (stumpwm:kbd "M-S-XF86AudioRaiseVolume") "vol+ 25% y")

;;; Muting
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioMute") "vol-mute")

;;; Display Brightness
(define-key *top-map* (kbd "XF86MonBrightnessUp") "display-brightness-up")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "display-brightness-down")

;;; Misc
(define-key *top-map* (kbd "F11") "fullscreen")

;; Root Map Assignments
;;; Terminal
(define-key *root-map* (kbd "c") "exec urxvt")
;;; Browse somewhere
(define-key *root-map* (kbd "b") "exec icecat")
;;; Lock screen
(define-key *root-map* (kbd "C-l") "exec slock")
;;; VPN
(define-key *root-map* (kbd "V") "exec /opt/cisco/anyconnect/bin/vpnui")
;;; Web Jump Searches
(define-key *root-map* (kbd "M-s") "duckduckgo")
(define-key *root-map* (kbd "i") "imdb")
;;; Emacsclient
(define-key *root-map* (kbd "e") "exec emacsclient")
(define-key *root-map* (kbd "E") "exec emacsclient -c")


;; Message/Modeline Font
(set-font "-gnu-unifont-medium-r-normal-sans-16-160-75-75-c-80-iso10646-1")

;;; Set up my Mode Line

(setf *window-format* "%m%n%s%t")
(setf *screen-mode-line-format* (list "[^B%n^b] %W^>| ⏻ %B | ⏲ %d"))
(setf *time-modeline-string* "%a %b %e %k:%M")
(setf *mode-line-timeout* 2)
(enable-mode-line (current-screen) (current-head) t)

;; Create my Standard Groups
(when *initializing*
  (mapcar #'gnewbg
          '("Emacs"
            "Messaging")))

;; Restore Window Placement Rules (defined in
;; ~/.config/stumpwm/window-placement.lisp

;;; Clear rules
(clear-window-placement-rules)

;;; Restore Rules
(restore-window-placement-rules "~/.config/stumpwm/window-placement.lisp")

;;; Starup Common Programs
(stumpwm:run-commands
 "exec icecat"
 "exec urxvt"
 "exec ~/.local/bin/chromium"
 "exec slack"
 "exec discord"
 "exec shepherd")
