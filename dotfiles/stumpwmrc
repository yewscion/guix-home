;; cdr255's .stumpwmrc file.

(in-package :stumpwm)
(require :battery-portable)
(require :screenshot)

;; These are lifted right from the example.
;;;
;;; Set our prefix key.
(set-prefix-key (kbd "C-t"))

;;; prompt the user for an interactive command. The first arg is an
;;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))
(defun timestamp () ()
  "Create a Formatted Timestamp."
  (multiple-value-bind
           (second minute hour day month year day-of-week dst-p tz)
    	   (get-decoded-time)
           (format t "~2,'0d-~2,'0d-~dT~2,'0d~2,'0d~2,'0d"
	    	 year
	    	 month
	    	 day
	    	 hour
	    	 minute
	    	 second)))

;; Custom Functions
(defcommand vol-mute () ()
  "Toggle mute of volume."
  (run-shell-command
   "[ $(pamixer --get-mute) = \"false\" ] && pamixer -m || pamixer -u" t)
  (show-volume))
(defcommand display-brightness-up () ()
  "Increase Brightness of Default Display."
  (run-shell-command "brightnessctl s 5%+" t))
(defcommand display-brightness-down () ()
  "Decrease Brightness of Default Display."
  (run-shell-command "brightnessctl s 5%-" t))
(defcommand show-volume () ()
  "Show the Current Volume Setting."
  (run-shell-command
   "echo \"Volume: $(pamixer --get-volume-human)\"" t))
(defcommand vol+5 () ()
  "Increase Volume by 5%"
  (run-shell-command
   "pamixer -i 5")
  (show-volume))
(defcommand vol-5 () ()
  "Decrease Volume by 5%"
  (run-shell-command
   "pamixer -d 5")
  (show-volume))
(defcommand vol+1 () ()
  "Increase Volume by 1%"
  (run-shell-command
   "pamixer -i 1")
  (show-volume))
(defcommand vol-1 () ()
  "Decrease Volume by 1%"
  (run-shell-command
   "pamixer -d 1")
  (show-volume))
(defcommand
p    screenshot-now () ()
    "Take a Screenshot NOW."
  (screenshot::%screenshot-window
   (xlib:screen-root
    (stumpwm:screen-number
     (stumpwm:current-screen)))
   (concatenate 'string "~/Pictures/" (timestamp) ".screenshot.png")))

;;; Keybindings
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioLowerVolume") "vol-5")
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioRaiseVolume") "vol+5")
(define-key stumpwm:*top-map* (stumpwm:kbd "C-XF86AudioLowerVolume") "vol-1")
(define-key stumpwm:*top-map* (stumpwm:kbd "C-XF86AudioRaiseVolume") "vol+1")
;;; Muting
(define-key stumpwm:*top-map* (stumpwm:kbd "XF86AudioMute") "vol-mute")
;;; Display Brightness
(define-key *top-map* (kbd "XF86MonBrightnessUp")
  "display-brightness-up")
(define-key *top-map* (kbd "XF86MonBrightnessDown")
  "display-brightness-down")
;;; Misc
(define-key *top-map* (kbd "F11") "fullscreen")
;; Root Map Assignments
;;; Terminal
(define-key *root-map* (kbd "c") "exec urxvt")
;;; Browse somewhere
(define-key *root-map* (kbd "b") "exec icecat")
;;; Lock screen
(define-key *root-map* (kbd "C-l") "exec slock")
;;; VPN
(define-key *root-map* (kbd "V") "exec /opt/cisco/anyconnect/bin/vpnui")
;;; Emacsclient
(define-key *root-map* (kbd "e") "exec emacsclient")
(define-key *root-map* (kbd "E") "exec emacsclient -c")
;;; Screenshots
(define-key *top-map* (kbd "Print") "screenshot-now")
;; Message/Modeline Font
(set-font "-gnu-unifont-medium-r-normal-sans-16-160-75-75-c-80-iso10646-1")

;;; Set up my Mode Line
(setf *window-format* "%m%n%s%t")
(setf *screen-mode-line-format* (list "[^B%n^b] %W^>| %B | %d"))
(setf *time-modeline-string* "%a %b %e %k:%M")
(setf *mode-line-timeout* 2)
(enable-mode-line (current-screen) (current-head) t)

;; Create my Standard Groups
(when *initializing*
  (mapcar #'gnewbg
          '("Emacs"
            "Messaging")))

;; Restore Window Placement Rules (defined in
;; ~/.config/stumpwm/window-placement.lisp
;;; Clear rules
(clear-window-placement-rules)

;;; Restore Rules
(restore-window-placement-rules "~/.config/stumpwm/window-placement.lisp")

;;; Starup Common Programs
(stumpwm:run-commands
 "exec pulseaudio --start"
 "exec icecat"
 "exec urxvt"
 "exec ~/.local/bin/chromium"
 "exec slack"
 "exec discord"
 "exec midori"
 "exec shepherd")

;; Local Variables:
;; mode: lisp
;; End:
