;; cdr255's .stumpwmrc file.

(in-package :stumpwm)
(require :battery-portable)
(require :screenshot)
(require :uiop)

;; These are lifted right from the example.
;;;
;;; Set our prefix key.
(set-prefix-key (kbd "C-t"))

;;; prompt the user for an interactive command. The first arg is an
;;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))
(defun timestamp () ()
  "Create a Formatted Timestamp."
  (multiple-value-bind
           (second minute hour day month year day-of-week dst-p tz)
    	   (get-decoded-time)
           (format nil "~2,'0d~2,'0d~2,'0dT~2,'0d~2,'0d~2,'0d"
	    	 year
	    	 month
	    	 day
	    	 hour
	    	 minute
	    	 second)))
(defun get-current-sink-port () ()
       "Get the current output sink port for pulseaudio."
  (read
   (uiop:process-info-output
    (uiop:launch-program
     "pacmd list-sinks | grep \"active port\" | sed 's/.*: //'"
     :output :stream))))
(defun is-current-port-speaker-p () ()
  "Return truthy if current sink port is <ANALOG-OUTPUT-SPEAKER>, falsey
otherwise."
  (string= (get-current-sink-port) "<ANALOG-OUTPUT-SPEAKER>"))
(defun toggle-sink-port () ()
  "Swap the port for the default sink between speaker and headphones"
  (if (is-current-port-speaker-p)
      (uiop:launch-program "pacmd set-sink-port 0 analog-output-headphones")
      (uiop:launch-program "pacmd set-sink-port 0 analog-output-speaker")))

;; Custom Functions
(defcommand brightness-up (amount)
  ((:number "Increase Brightness by: "))
  "Increase Brightness of Default Display."
  (run-shell-command (format nil "brightnessctl s ~d%+" amount) t))
(defcommand brightness-down (amount)
  ((:number "Decrease Brightness by: "))
  "Decrease Brightness of Default Display."
  (run-shell-command (format nil "brightnessctl s ~d%-" amount) t))
(defcommand show-volume () ()
  "Show the Current Volume Setting."
  (run-shell-command
   "echo \"Volume: $(pamixer --get-volume-human)\"" t))
(defcommand volume-mute () ()
  "Toggle mute of volume."
  (run-shell-command
   "[ $(pamixer --get-mute) = \"false\" ] && pamixer -m || pamixer -u" t)
  (show-volume))
(defcommand volume-up (amount)
  ((:number "Increase Volume By: "))
  "Increase Volume."
  (run-shell-command
   (format nil "pamixer -i ~d" amount))
  (show-volume))
(defcommand volume-down (amount)
  ((:number "Decrease Volume By: "))
  "Decrease Volume by 5%"
  (run-shell-command
   (format nil "pamixer -d ~d" amount))
  (show-volume))
(defcommand
    screenshot-now () ()
    "Take a Screenshot NOW."
    (screenshot::%screenshot-window
     (xlib:screen-root
      (stumpwm:screen-number
       (stumpwm:current-screen)))
     (format nil "~~/Pictures/~a.screenshot.png" (timestamp))))
(defcommand
    swap-sink-port () ()
  "Swap the default Sink Port Between Speakers and Headphones."
  (toggle-sink-port))
;; Keybindings
;;; Volume
(define-key stumpwm:*top-map*
    (stumpwm:kbd "XF86AudioLowerVolume") "volume-down 5")
(define-key stumpwm:*top-map*
    (stumpwm:kbd "XF86AudioRaiseVolume") "volume-up 5")
(define-key stumpwm:*top-map*
    (stumpwm:kbd "C-XF86AudioLowerVolume") "volume-down 1")
(define-key stumpwm:*top-map*
    (stumpwm:kbd "C-XF86AudioRaiseVolume") "volume-up 1")
;;; Muting
(define-key stumpwm:*top-map*
    (stumpwm:kbd "XF86AudioMute") "volume-mute")
;;; Swap Outputs
(define-key stumpwm:*top-map*
    (stumpwm:kbd "C-XF86AudioMute") "swap-sink-port")
;;; Display Brightness
(define-key *top-map* (kbd "XF86MonBrightnessDown")
  "brightness-down 5")
(define-key *top-map* (kbd "XF86MonBrightnessUp")
  "brightness-up 5")
(define-key *top-map* (kbd "C-XF86MonBrightnessDown")
  "brightness-down 1")
(define-key *top-map* (kbd "C-XF86MonBrightnessUp")
  "brightness-up 1")
;;; Misc
(define-key *top-map* (kbd "F11") "fullscreen")
;; Root Map Assignments
;;; Terminal
(define-key *root-map* (kbd "c") "exec urxvt")
;;; Browse somewhere
(define-key *root-map* (kbd "b") "exec icecat")
;;; Lock screen
(define-key *root-map* (kbd "C-l") "exec slock")
;;; VPN
(define-key *root-map* (kbd "V") "exec /opt/cisco/anyconnect/bin/vpnui")
;;; Emacsclient
(define-key *root-map* (kbd "e") "exec emacsclient -c")
;;; Emacs Everywhere ; Ruins current emacsclient session.
;(define-key *root-map* (kbd "E") "exec emacsclient --eval '(emacs-everywhere)'")
;;; Screenshots
(define-key *top-map* (kbd "Print") "screenshot-now")
;; Message/Modeline Font
(set-font "-gnu-unifont-medium-r-normal-sans-16-160-75-75-c-80-iso10646-1")

;;; Set up my Mode Line
(setf *window-format* "%m%n%s%t")
(setf *screen-mode-line-format* (list "[^B%n^b] %W^>| %B | %d"))
(setf *time-modeline-string* "%a %b %e %k:%M")
(setf *mode-line-timeout* 2)
(enable-mode-line (current-screen) (current-head) t)

;; Create my Standard Groups
(when *initializing*
  (mapcar #'gnewbg
          '("Emacs"
            "Messaging")))

;; Restore Window Placement Rules (defined in
;; ~/.config/stumpwm/window-placement.lisp
;;; Clear rules
(clear-window-placement-rules)

;;; Restore Rules
(restore-window-placement-rules "~/.config/stumpwm/window-placement.lisp")

;;; Starup Common Programs
(stumpwm:run-commands
 "exec --no-startup-id fcitx5 -d"
 "exec pulseaudio --start"
 "exec icecat"
 "exec urxvt"
 "exec ~/.local/bin/chromium"
 "exec slack"
 "exec discord"
 "exec shepherd")

;; Local Variables:
;; mode: lisp
;; End:
